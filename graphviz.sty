% graphviz.sty
% Tomas Barton 2012 (barton.tomas@gmail.com)
% 
% 
% Based on graphviz.sty by Ives van der Flaas 2010 http://code.google.com/p/graphvizzz/
% Based on graphviz.sty by Mark Aufflick 2006-03-25
% Based on graphviz.tex by Derek Rayside 2003

% add the following lines to your preamble:

% \usepackage[pdftex]{graphicx} 
% \usepackage{pgfkeys}
% \usepackage{ifthen}
% \usepackage{environ}
% \usepackage{graphviz}

%% if passing argument to graphicx fails try:
%% \PassOptionsToPackage{pdftex}{graphicx}
%% \usepackage{graphicx}

% usage: \begin{digraph}[scale=0.5]{graphName}
%  	    a->b;         
%        \end{digraph}
% for graphviz syntax see http://graphviz.org/

% parameters to \digraph:
% 1 - optional parameters (default value is "scale=1") or you can use "layout=twopi"
%     for changing graphviz filter  (possible values "layout=dot|neato|twopi|circo|fdp|sfdp" see graphviz documentation for more details)
%     default is "layout=dot"
% 2 - name of the digraph
%
% !!! make sure you compile your document with `pdflatex -shell-escape doc.tex`
% "-shell-escape" allows pdflatex to execute code in bash, which is
% for security reasons forbidden in most LaTeX distributions
%
\ProvidesPackage{graphviz}

\ifx\pdf@filemoddate\@undefined
% Without filemoddate (e.g. XeLaTeX) only the existence of the file can be tested:
\newcommand*{\writesuccess}[2]{%
    \immediate\write18{#2}%
    \IfFileExists{#1}%
}
\else
% Check if to-be-generated file exists afterwards and is newer:
\newcommand*{\writesuccess}[2]{%
    \begingroup
    \edef\filemodbefore{\pdf@filemoddate{#1}}%
    \immediate\write18{#2}%
    \IfFileExists{#1}{%
        \edef\filemodafter{\pdf@filemoddate{#1}}%
        \ifx\filemodbefore\filemodafter
            \let\next\@secondoftwo
        \else
            \let\next\@firstoftwo
        \fi
    }{%
        \let\next\@secondoftwo
    }%
    \expandafter
    \endgroup
    \next
}
\fi

\def\showHint#1{%
    We attempted to run graphviz with:\\
	  `\texttt{#1}' \\
    but it doesn't seem not to work. Possible reasons are:
      \begin{itemize}
	  \item dot is not in your path (check that command above works in terminal)
	  \item write18 is not enabled
	  \item runsystem is disabled (try `pdflatex -shell-escape *.tex`)
      \end{itemize}
}

\pgfkeys{
 /graphviz/.is family, /graphviz,
 scale/.default=1,
 layout/.default=dot,
 output/.default=pdf,
 dir/.default=graphviz,
 scale/.estore in = \graphvizScale,
 layout/.estore in = \graphvizLayout,
 output/.estore in = \graphvizOutput,
 dir/.estore in = \graphvizDir,
 dotTotex/.estore in = \dotTotexOptions
}

\def\renderGraphviz{
  \ifthenelse{\equal{\graphvizOutput}{tex}}
  {%
    \def\graphvizCmd{`which \graphvizLayout` -Txdot \filename.dot | `which dot2tex` -tmath --figonly --usepdflatex -ftikz -o \filename.tex}
    \writesuccess{\filename.tex}{bash -c "\graphvizCmd"}  
    \IfFileExists{\filename.tex}
    % the tex exists: include it 
    { \include{\filename} }
    {% else show a hint
      \showHint{\graphvizCmd}
    }
  }
  {%
    \def\graphvizCmd{`which \graphvizLayout`\space -T\graphvizOutput\space \filename.dot > \filename.\graphvizOutput}
    %after executing macro all spaces are removed, so we need to add one manually
    \immediate\writesuccess{\filename.\graphvizOutput}{bash -c "\graphvizCmd"}
    \IfFileExists{\filename.pdf}
    % the pdf exists: include it 
    { 
      \includegraphics[scale=\graphvizScale]{\filename}
    } 
    % the pdf was not created - show a hint
    {   
      \showHint{\graphvizCmd}
    }
  }
}
% Usage: \includedot[scale=0.5]{dotfile}
\newcommand*{\includedot}[2][scale=1,layout=dot,output=pdf]{ %
  \pgfkeys{/graphviz, #1}%
  \graphvizDefaultSettings
  \def\filename{#2}

  \ifthenelse{\equal{\graphvizOutput}{tex}}
  {% TeX 
    \def\graphvizCmd{`which dot2tex`\space -tmath --figonly --usepdflatex -ftikz \filename.dot > \filename.tex}
    \writesuccess{\filename.tex}{bash -c "\graphvizCmd"}  
    \IfFileExists{\filename.tex}
    % the tex exists: include it 
    { \include{\filename} }
    {% else show a hint
      \showHint{\graphvizCmd}
    }
  }
  {%else other output formats
      \def\graphvizCmd{`which \graphvizLayout`\space -T\graphvizOutput\space \filename.dot > \filename.\graphvizOutput}
      \immediate\writesuccess{\filename.\graphvizOutput}{bash -c "\graphvizCmd"}
      \IfFileExists{#2.\graphvizOutput}
      % the pdf exists: include it
      { \includegraphics[scale=\graphvizScale]{\filename} }
      {
      % the pdf was not created - show a hint
	\showHint{\graphvizCmd}
      }
   }
  }

\newwrite\dotfile
%write output to dot file
\def\writeDotFile#1{% 
  \immediate\openout\dotfile=\filename.dot
  \typeout{writing graph to '\filename.dot'}
  % unexpanded force LaTeX not to evaluate passed string (necessary for allowing backslash in e.g. "\n")
  \immediate\write\dotfile{\graphvizType\space "\filename" {\unexpanded{#1}}}
  \immediate\closeout\dotfile
  \graphvizDefaultSettings
  \renderGraphviz
}

\newcommand*{\graphvizDefaultSettings}{
  %make sure we defined a graphviz command
  \ifdefined\graphvizLayout\else
    \def\graphvizLayout{dot}
  \fi
  \ifdefined\graphvizOutput\else
    \def\graphvizOutput{pdf}
  \fi
  \ifdefined\graphvizScale\else
    \def\graphvizScale{1}
  \fi
}

\newcommand*{\graphvizProcessDiagram}[2]{
  \ifthenelse{\equal{#2}{}}{
    \typeout{missing name}
  }{}
%parse options
  \pgfkeys{/graphviz, #1}%
  \ifdefined\graphvizDir
    \def\filename{\graphvizDir/\unexpanded{#2}}
  \else
    \def\filename{\unexpanded{#2}}
  \fi
\typeout{1: #1}
\typeout{2: #2}
  %writes environment to a file  
  \Collect@Body\writeDotFile
}

% first argument is the one in []
% \begin{graph}[first]{name}
% \end{graph}
\newenvironment{graph}[2][scale=1,layout=dot,output=pdf]%
{
\def\graphvizType{graph}
%header
  \graphvizProcessDiagram{#1}{#2}
}{
%footer - this block is added after 
}

% first argument is the one in []
% \begin{digraph}[first]{name}
% \end{digraph}
\newenvironment{digraph}[2][scale=1,layout=dot,output=pdf]%
{
\def\graphvizType{digraph}
%header
  \graphvizProcessDiagram{#1}{#2} 
}{
%footer - this block is added after 
}

